const express = require('express');
const dotenv = require('dotenv');
const logger = require('./utils/logger');
const { testConnection } = require('./config/database');
const { connectPrometheus } = require('./monitoring/prometheus');
const { getService, ServiceType } = require('./services/serviceRegistry');
const setupApp = require('./app-setup');
const config = require('./config/configManager');

// Load environment variables first
dotenv.config();

// Initialize Express app
const app = express();
const PORT = config.server.port || 3000;

// Connect to database 
testConnection();

// Initialize services
try {
  // Initialize all required services
  const storageService = getService(ServiceType.STORAGE);
  const aiService = getService(ServiceType.AI);
  const queueService = getService(ServiceType.QUEUE);
  const authService = getService(ServiceType.AUTH);
  const resumeService = getService(ServiceType.RESUME);
  
  logger.info('All services initialized successfully');
  
  // Initialize resume customization worker
  require('./workers/resumeWorker');
} catch (error) {
  logger.error(`Service initialization error: ${error.message}`, { error });
  
  if (process.env.NODE_ENV === 'production') {
    // In production, we should fail fast
    logger.error('Exiting application due to service initialization failure');
    process.exit(1);
  }
}

// Connect Prometheus if in production
if (process.env.NODE_ENV === 'production') {
  connectPrometheus();
}

// Setup the app with all middleware and routes
setupApp(app);

// Start the server
if (process.env.NODE_ENV !== 'test') {
  app.listen(PORT, () => {
    logger.info(`Server running on port ${PORT}`, {
      port: PORT,
      environment: process.env.NODE_ENV || 'development',
      nodeVersion: process.version
    });
  });
}

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  logger.error('Uncaught exception', { error: error.stack });
  
  // In production, exit the process to allow for restart
  if (process.env.NODE_ENV === 'production') {
    logger.error('Exiting application due to uncaught exception');
    process.exit(1);
  }
});

// Handle unhandled promise rejections
process.on('unhandledRejection', (reason, promise) => {
  logger.error('Unhandled promise rejection', { 
    reason: reason instanceof Error ? reason.stack : reason,
    promise
  });
  
  // In production, exit the process to allow for restart
  if (process.env.NODE_ENV === 'production') {
    logger.error('Exiting application due to unhandled rejection');
    process.exit(1);
  }
});

// For testing purposes
module.exports = app;
