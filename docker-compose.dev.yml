version: '3.8'

services:
  backend:
    build: 
      context: .
      target: development
    container_name: resume-customizer-backend
    restart: unless-stopped
    ports:
      - "3005:3000"
    env_file: .env.dev
    # Fall back to these if not in .env file
    environment:
      - NODE_ENV=development
      - PORT=3000
      - PUBLIC_URL=http://localhost:3005
      - LOG_LEVEL=debug
    volumes:
      - ./src:/usr/src/app/src:ro
      - ./package.json:/usr/src/app/package.json:ro
      - ./package-lock.json:/usr/src/app/package-lock.json:ro
      - ./.sequelizerc:/usr/src/app/.sequelizerc:ro
    networks:
      - resume-customizer-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      minio:
        condition: service_healthy
      mock-n8n:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 15s
    deploy:
      resources:
        limits:
          cpus: '0.5'
          memory: 512M

  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    container_name: resume-customizer-postgres
    env_file: .env.dev
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_DB: resume_customizer
      PGDATA: /var/lib/postgresql/data/pgdata
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - resume-customizer-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # Redis for Bull queue
  redis:
    image: redis:7-alpine
    container_name: resume-customizer-redis
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes
    networks:
      - resume-customizer-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # MinIO (S3-compatible storage)
  minio:
    image: minio/minio:RELEASE.2023-09-07T02-05-02Z
    container_name: resume-customizer-minio
    env_file: .env.dev
    environment:
      MINIO_ROOT_USER: ${AWS_ACCESS_KEY_ID:-minioadmin}
      MINIO_ROOT_PASSWORD: ${AWS_SECRET_ACCESS_KEY:-minioadmin}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    networks:
      - resume-customizer-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.3'
          memory: 256M

  # Mock N8N API (Simplified API to simulate n8n webhook)
  mock-n8n:
    image: node:20.11-alpine
    container_name: resume-customizer-mock-n8n
    working_dir: /app
    volumes:
      - ./dev/mock-n8n:/app
    ports:
      - "5678:5678"
    command: >
      sh -c "npm install express cors &&
             node server.js"
    environment:
      PORT: 5678
    networks:
      - resume-customizer-network
    healthcheck:
      test: ["CMD", "wget", "-qO-", "http://localhost:5678/health"]
      interval: 5s
      timeout: 5s
      retries: 5
    deploy:
      resources:
        limits:
          cpus: '0.2'
          memory: 128M

  # Add a useful DB admin tool
  adminer:
    image: adminer:4.8.1
    container_name: resume-customizer-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - ADMINER_DEFAULT_SERVER=postgres
    networks:
      - resume-customizer-network
    depends_on:
      - postgres
    deploy:
      resources:
        limits:
          cpus: '0.1'
          memory: 64M

networks:
  resume-customizer-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  minio-data: