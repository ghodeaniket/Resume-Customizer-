name: Resume Customizer CD

on:
  # Trigger the workflow on push to main or manual dispatch
  push:
    branches: [main]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - staging
          - production

jobs:
  deploy:
    name: Deploy to ${{ github.event.inputs.environment || 'dev' }}
    runs-on: ubuntu-latest
    environment: ${{ github.event.inputs.environment || 'dev' }}
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci --no-audit --omit=dev
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}
    
    - name: Clean node_modules for zip
      run: |
        echo "Cleaning up large files before zipping..."
        find node_modules -type d -name ".git" -exec rm -rf {} +  2>/dev/null || true
        find node_modules -type d -name "test" -exec rm -rf {} +  2>/dev/null || true
        find node_modules -type d -name "tests" -exec rm -rf {} +  2>/dev/null || true
        find node_modules -type f -name "*.md" -delete  2>/dev/null || true
        find node_modules -type f -name "*.ts" -delete  2>/dev/null || true
        find node_modules -type f -name "*.map" -delete  2>/dev/null || true
        
        # Remove specific large packages
        rm -rf node_modules/@serverless || true
        rm -rf node_modules/serverless || true
        rm -rf node_modules/puppeteer || true
        rm -rf node_modules/puppeteer-core || true
        rm -rf node_modules/chrome-aws-lambda || true
        rm -rf node_modules/aws-sdk || true
        
        # Remove any other large files/directories
        find node_modules -type d -name "docs" -exec rm -rf {} +  2>/dev/null || true
        find node_modules -type d -name "examples" -exec rm -rf {} +  2>/dev/null || true
    
    - name: Create Lambda handler
      run: |
        mkdir -p src
        echo 'const app = require("./app");' > src/lambda.js
        echo 'const serverless = require("serverless-http");' >> src/lambda.js
        echo '' >> src/lambda.js
        echo 'const handler = serverless(app);' >> src/lambda.js
        echo '' >> src/lambda.js
        echo 'module.exports.handler = async (event, context) => {' >> src/lambda.js
        echo '  try {' >> src/lambda.js
        echo '    return await handler(event, context);' >> src/lambda.js
        echo '  } catch (error) {' >> src/lambda.js
        echo '    console.error("FATAL ERROR:", error);' >> src/lambda.js
        echo '    return {' >> src/lambda.js
        echo '      statusCode: 500,' >> src/lambda.js
        echo '      body: JSON.stringify({' >> src/lambda.js
        echo '        message: "Internal server error",' >> src/lambda.js
        echo '        errorType: error.name,' >> src/lambda.js
        echo '        errorMessage: error.message' >> src/lambda.js
        echo '      })' >> src/lambda.js
        echo '    };' >> src/lambda.js
        echo '  }' >> src/lambda.js
        echo '};' >> src/lambda.js
    
    - name: Create deployment package
      run: |
        # Create deployment package directory
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        FUNCTION_NAME="resume-customizer-backend-${STAGE}-api"
        PACKAGE_DIR="deployment-package"
        mkdir -p $PACKAGE_DIR
        
        # Copy necessary files to package directory
        cp -r src $PACKAGE_DIR/
        cp -r node_modules $PACKAGE_DIR/
        cp package.json $PACKAGE_DIR/
        
        # Create deployment zip
        cd $PACKAGE_DIR
        zip -r ../deployment.zip .
        cd ..
        
        echo "FUNCTION_NAME=$FUNCTION_NAME" >> $GITHUB_ENV
        echo "Created deployment package"
    
    - name: Check if Lambda function exists
      run: |
        FUNCTION_NAME="${{ env.FUNCTION_NAME }}"
        if aws lambda get-function --function-name $FUNCTION_NAME &> /dev/null; then
          echo "FUNCTION_EXISTS=true" >> $GITHUB_ENV
          echo "Lambda function $FUNCTION_NAME exists, will update it"
        else
          echo "FUNCTION_EXISTS=false" >> $GITHUB_ENV
          echo "Lambda function $FUNCTION_NAME does not exist, will create it"
        fi
    
    - name: Create S3 Bucket for resumes
      run: |
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        BUCKET_NAME="resume-customizer-backend-${STAGE}-resumes"
        
        # Check if bucket exists
        if ! aws s3api head-bucket --bucket $BUCKET_NAME 2>/dev/null; then
          echo "Creating S3 bucket $BUCKET_NAME"
          aws s3api create-bucket --bucket $BUCKET_NAME --region ${{ secrets.AWS_REGION }} \
            --create-bucket-configuration LocationConstraint=${{ secrets.AWS_REGION }}
          
          # Add CORS configuration using JSON string directly
          echo '{"CORSRules":[{"AllowedHeaders":["*"],"AllowedMethods":["GET","PUT","POST","DELETE","HEAD"],"AllowedOrigins":["*"],"MaxAgeSeconds":3000}]}' > cors-config.json
          
          aws s3api put-bucket-cors --bucket $BUCKET_NAME --cors-configuration file://cors-config.json
        else
          echo "S3 bucket $BUCKET_NAME already exists"
        fi
    
    - name: Create DynamoDB table
      run: |
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        TABLE_NAME="resume-customizer-backend-${STAGE}-resumes"
        
        # Check if table exists
        if ! aws dynamodb describe-table --table-name $TABLE_NAME &> /dev/null; then
          echo "Creating DynamoDB table $TABLE_NAME"
          aws dynamodb create-table \
            --table-name $TABLE_NAME \
            --attribute-definitions AttributeName=id,AttributeType=S \
            --key-schema AttributeName=id,KeyType=HASH \
            --billing-mode PAY_PER_REQUEST \
            --stream-specification StreamEnabled=true,StreamViewType=NEW_AND_OLD_IMAGES
        else
          echo "DynamoDB table $TABLE_NAME already exists"
        fi
    
    - name: Get AWS account ID
      run: |
        AWS_ACCOUNT_ID=$(aws sts get-caller-identity --query 'Account' --output text)
        echo "AWS_ACCOUNT_ID=$AWS_ACCOUNT_ID" >> $GITHUB_ENV
    
    - name: Create IAM role for Lambda
      if: env.FUNCTION_EXISTS == 'false'
      run: |
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        ROLE_NAME="resume-customizer-backend-${STAGE}-lambda-role"
        
        # Check if role exists
        if ! aws iam get-role --role-name $ROLE_NAME &> /dev/null; then
          echo "Creating IAM role $ROLE_NAME"
          
          # Create trust policy document
          echo '{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Principal":{"Service":"lambda.amazonaws.com"},"Action":"sts:AssumeRole"}]}' > trust-policy.json
          
          # Create role
          aws iam create-role --role-name $ROLE_NAME \
            --assume-role-policy-document file://trust-policy.json
          
          # Attach AWSLambdaBasicExecutionRole policy
          aws iam attach-role-policy --role-name $ROLE_NAME \
            --policy-arn arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
          
          # Create custom policy for DynamoDB and S3 access
          POLICY_JSON='{"Version":"2012-10-17","Statement":[{"Effect":"Allow","Action":["dynamodb:GetItem","dynamodb:PutItem","dynamodb:UpdateItem","dynamodb:DeleteItem","dynamodb:Query","dynamodb:Scan"],"Resource":"arn:aws:dynamodb:${{ secrets.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:table/resume-customizer-backend-'${STAGE}'-resumes"},{"Effect":"Allow","Action":["s3:GetObject","s3:PutObject","s3:DeleteObject"],"Resource":["arn:aws:s3:::resume-customizer-backend-'${STAGE}'-resumes/*"]}]}'
          echo "$POLICY_JSON" > custom-policy.json
          
          # Attach custom policy
          aws iam put-role-policy --role-name $ROLE_NAME \
            --policy-name resume-customizer-backend-policy \
            --policy-document file://custom-policy.json
          
          # Wait for role to propagate
          sleep 10
          
          echo "ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)" >> $GITHUB_ENV
        else
          echo "IAM role $ROLE_NAME already exists"
          echo "ROLE_ARN=$(aws iam get-role --role-name $ROLE_NAME --query 'Role.Arn' --output text)" >> $GITHUB_ENV
        fi
    
    - name: Get existing Lambda role ARN
      if: env.FUNCTION_EXISTS == 'true'
      run: |
        FUNCTION_NAME="${{ env.FUNCTION_NAME }}"
        echo "ROLE_ARN=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.Role' --output text)" >> $GITHUB_ENV
    
    - name: Create Lambda function
      if: env.FUNCTION_EXISTS == 'false'
      run: |
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        FUNCTION_NAME="${{ env.FUNCTION_NAME }}"
        
        # Create Lambda function
        aws lambda create-function \
          --function-name $FUNCTION_NAME \
          --runtime nodejs18.x \
          --handler "src/lambda.handler" \
          --role ${{ env.ROLE_ARN }} \
          --zip-file fileb://deployment.zip \
          --timeout 30 \
          --memory-size 1024 \
          --environment "Variables={NODE_ENV=$STAGE,DB_HOST=localhost,DB_NAME=resume_customizer,DB_USER=postgres,DB_PASSWORD=password,JWT_SECRET=temp-jwt-secret-$STAGE,JWT_EXPIRES_IN=7d,STORAGE_TYPE=s3,S3_BUCKET=resume-customizer-backend-$STAGE-resumes,S3_REGION=${{ secrets.AWS_REGION }},LOCAL_STORAGE_PATH=./uploads,AI_SERVICE_IMPLEMENTATION=n8n,N8N_WEBHOOK_URL=http://localhost:5678,N8N_WEBHOOK_PATH=/webhook/customize-resume-ai,N8N_TIMEOUT_MS=120000,N8N_MAX_RETRIES=3,LLM_API_KEY=test-key,LLM_API_BASE_URL=https://openrouter.ai/api,LLM_MODEL_NAME=deepseek/deepseek-r1-distill-llama-70b,LLM_TIMEOUT_MS=120000,REDIS_HOST=localhost,REDIS_PORT=6379,REDIS_PASSWORD=,PUBLIC_URL=https://api-$STAGE.resume-customizer.example.com,FALLBACK_TO_MOCK=true}"
    
    - name: Update Lambda function
      if: env.FUNCTION_EXISTS == 'true'
      run: |
        FUNCTION_NAME="${{ env.FUNCTION_NAME }}"
        
        # Wait for any in-progress updates to complete
        echo "Checking if Lambda function is ready for updates..."
        MAX_ATTEMPTS=30
        ATTEMPTS=0
        while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
          STATUS=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.LastUpdateStatus' --output text || echo "Failed")
          
          if [ "$STATUS" = "Successful" ] || [ "$STATUS" = "Failed" ] || [ "$STATUS" = "null" ]; then
            echo "Lambda function is ready for updates. Current status: $STATUS"
            break
          fi
          
          echo "Lambda function is not ready. Current status: $STATUS. Waiting 10 seconds..."
          sleep 10
          ATTEMPTS=$((ATTEMPTS+1))
        done
        
        if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
          echo "Timed out waiting for Lambda function to be ready for updates."
          exit 1
        fi
        
        # Update Lambda function code
        echo "Updating Lambda function code..."
        aws lambda update-function-code \
          --function-name $FUNCTION_NAME \
          --zip-file fileb://deployment.zip
        
        # Wait for code update to complete
        echo "Waiting for code update to complete..."
        ATTEMPTS=0
        while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
          STATUS=$(aws lambda get-function --function-name $FUNCTION_NAME --query 'Configuration.LastUpdateStatus' --output text || echo "Failed")
          
          if [ "$STATUS" = "Successful" ] || [ "$STATUS" = "Failed" ]; then
            echo "Code update completed with status: $STATUS"
            break
          fi
          
          echo "Code update in progress. Current status: $STATUS. Waiting 10 seconds..."
          sleep 10
          ATTEMPTS=$((ATTEMPTS+1))
        done
        
        if [ $ATTEMPTS -eq $MAX_ATTEMPTS ]; then
          echo "Timed out waiting for code update to complete."
          exit 1
        fi
        
        # Update Lambda function configuration
        echo "Updating Lambda function configuration..."
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        aws lambda update-function-configuration \
          --function-name $FUNCTION_NAME \
          --timeout 30 \
          --memory-size 1024 \
          --handler "src/lambda.handler" \
          --environment "Variables={NODE_ENV=$STAGE,DB_HOST=localhost,DB_NAME=resume_customizer,DB_USER=postgres,DB_PASSWORD=password,JWT_SECRET=temp-jwt-secret-$STAGE,JWT_EXPIRES_IN=7d,STORAGE_TYPE=s3,S3_BUCKET=resume-customizer-backend-$STAGE-resumes,S3_REGION=${{ secrets.AWS_REGION }},LOCAL_STORAGE_PATH=./uploads,AI_SERVICE_IMPLEMENTATION=n8n,N8N_WEBHOOK_URL=http://localhost:5678,N8N_WEBHOOK_PATH=/webhook/customize-resume-ai,N8N_TIMEOUT_MS=120000,N8N_MAX_RETRIES=3,LLM_API_KEY=test-key,LLM_API_BASE_URL=https://openrouter.ai/api,LLM_MODEL_NAME=deepseek/deepseek-r1-distill-llama-70b,LLM_TIMEOUT_MS=120000,REDIS_HOST=localhost,REDIS_PORT=6379,REDIS_PASSWORD=,PUBLIC_URL=https://api-$STAGE.resume-customizer.example.com,FALLBACK_TO_MOCK=true}"
    
    - name: Create or update API Gateway
      run: |
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        FUNCTION_NAME="${{ env.FUNCTION_NAME }}"
        API_NAME="resume-customizer-backend-$STAGE-api"
        
        # Check if API exists
        API_ID=$(aws apigatewayv2 get-apis --query "Items[?Name=='$API_NAME'].ApiId" --output text)
        
        if [ -z "$API_ID" ]; then
          echo "Creating new API Gateway"
          
          # Create HTTP API
          API_ID=$(aws apigatewayv2 create-api \
            --name $API_NAME \
            --protocol-type HTTP \
            --cors-configuration AllowOrigins='*',AllowMethods='GET,POST,PUT,DELETE,OPTIONS',AllowHeaders='Content-Type,Authorization' \
            --query 'ApiId' --output text)
          
          # Create Lambda integration
          INTEGRATION_ID=$(aws apigatewayv2 create-integration \
            --api-id $API_ID \
            --integration-type AWS_PROXY \
            --integration-uri "arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:function:$FUNCTION_NAME" \
            --payload-format-version 2.0 \
            --query 'IntegrationId' --output text)
          
          # Create default route
          aws apigatewayv2 create-route \
            --api-id $API_ID \
            --route-key 'ANY /{proxy+}' \
            --target "integrations/$INTEGRATION_ID"
          
          # Create deployment
          aws apigatewayv2 create-deployment \
            --api-id $API_ID \
            --stage-name $STAGE
        else
          echo "API Gateway already exists: $API_ID"
          
          # Update existing integration
          INTEGRATION_ID=$(aws apigatewayv2 get-integrations \
            --api-id $API_ID \
            --query 'Items[0].IntegrationId' \
            --output text)
            
          if [ -n "$INTEGRATION_ID" ]; then
            aws apigatewayv2 update-integration \
              --api-id $API_ID \
              --integration-id $INTEGRATION_ID \
              --integration-uri "arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:function:$FUNCTION_NAME"
          fi
          
          # Create new deployment
          aws apigatewayv2 create-deployment \
            --api-id $API_ID \
            --stage-name $STAGE
        fi
        
        # Add permission for API Gateway to invoke Lambda
        aws lambda add-permission \
          --function-name $FUNCTION_NAME \
          --statement-id "apigateway-$API_ID" \
          --action lambda:InvokeFunction \
          --principal apigateway.amazonaws.com \
          --source-arn "arn:aws:execute-api:${{ secrets.AWS_REGION }}:${{ env.AWS_ACCOUNT_ID }}:$API_ID/*/*/*" || true
        
        # Get API URL
        API_URL="https://$API_ID.execute-api.${{ secrets.AWS_REGION }}.amazonaws.com/$STAGE"
        echo "API_URL=$API_URL" >> $GITHUB_ENV
    
    - name: Deployment notification
      run: |
        STAGE="${{ github.event.inputs.environment || 'dev' }}"
        echo "✅ Deployment to $STAGE completed successfully!"
        echo "🔗 API URL: ${{ env.API_URL }}"